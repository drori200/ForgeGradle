plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id('com.palantir.git-version') version('0.13.0')
}

group = 'net.minecraftforge.gradle'

version = gitVersion()

// Fix Jenkins' Git: chmod a file should not be detected as a change and append a '.dirty' to the version
'git config core.fileMode false'.execute()

archivesBaseName = 'ForgeGradle'
targetCompatibility = '1.8'
sourceCompatibility = '1.8'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name 'forge'
        url 'https://maven.minecraftforge.net/'
    }
	maven {
		name 'GT forge Mirror'
		url 'https://gregtech.overminddl1.com/'
	}
    maven {
        // GTNH SpecialSource Fork
        name = "GTNH Maven"
        url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
    }
    maven {
        // because Srg2Source needs an eclipse dependency.
        name 'eclipse'
        url 'https://repo.eclipse.org/content/groups/eclipse/'
    }
    maven {
        // because SpecialSource doesn't have a full release
        name 'sonatype'
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'mojang'
        url 'https://libraries.minecraft.net/'
    }
}

jar {
    manifest {
        attributes 'version': project.version, 'javaCompliance': project.targetCompatibility
        attributes 'group': project.group
        attributes 'Implementation-Version': project.version
    }
}

configurations {
    compileOnly
}

dependencies {
    compile gradleApi()

    // moved to the beginning to be the overrider
    compile 'org.ow2.asm:asm-debug-all:5.0.3'

    compile 'com.google.guava:guava:18.0'

    compile 'net.sf.opencsv:opencsv:2.3' // reading CSVs.. also used by SpecialSource
    compile 'com.cloudbees:diff4j:1.1' // for diffing and patching
    compile 'com.github.abrarsyed.jastyle:jAstyle:1.2' // formatting
//    compile 'com.github.JetBrains:intellij-deps-trove4j:c08db9d' //JETBRAINS/Ubuntu/Jenkins fix
    compile 'com.github.jponge:lzma-java:1.3' // replaces the LZMA binary
    compile 'com.nothome:javaxdelta:2.0.1' // GDIFF implementation for BinPatches
    compile 'com.google.code.gson:gson:2.2.4' // Used instead of Argo for building changelog.
    compile 'com.github.tony19:named-regexp:0.2.3' // 1.7 Named regexp features

    //Custom version of SpecialSource which uses ASM 9
    compile 'net.md-5:SpecialSource:1.11.0' // deobf and reobs

    // because curse
    compile 'org.apache.httpcomponents:httpclient:4.3.3'
    compile 'org.apache.httpcomponents:httpmime:4.3.3'

    // mcp stuff
    compile 'de.oceanlabs.mcp:RetroGuard:3.6.6'
    compile 'de.oceanlabs.mcp:mcinjector:3.2-SNAPSHOT'
    compile 'net.minecraftforge.srg2source:Srg2Source:3.2-SNAPSHOT'

    // The old version used by S2S is gone, so we need to force the latest build of that minor release
    compile('org.eclipse.jdt:org.eclipse.jdt.core:3.10.0+') {
        force = true
    }

    //Stuff used in the GradleStart classes
    compileOnly 'com.mojang:authlib:1.5.16'
    compileOnly "net.minecraft:launchwrapper:1.11"

    testCompile 'junit:junit:4.+'
}

compileJava {
    options.deprecation = true
}

javadoc {
    classpath += configurations.compileOnly

    // linked javadoc urls.. why not...
    options.addStringOption 'link', 'https://gradle.org/docs/current/javadoc/'
    options.addStringOption 'link', 'http://docs.guava-libraries.googlecode.com/git-history/v18.0/javadoc'
    options.addStringOption 'link', 'http://asm.ow2.org/asm50/javadoc/user/'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc
    classifier = "javadoc"
}

artifacts {
    archives jar
    archives javadocJar
}

test {
    if (project.hasProperty("filesmaven")) // disable this test when on the forge jenkins
    {
        exclude "**/ExtensionMcpMappingTest*"
        exclude "**/ExtensionForgeVersionTest*"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact javadocJar

            pom {
                name = project.archivesBaseName
                description = 'Gradle plugin for Forge'
                url = 'https://github.com/GTNewHorizons/ForgeGradle'

                scm {
                    url = 'https://github.com/GTNewHorizons/ForgeGradle'
                    connection = 'scm:git:git://github.com/GTNewHorizons/ForgeGradle.git'
                    developerConnection = 'scm:git:git@github.com:GTNewHorizons/ForgeGradle.git'
                }

                issueManagement {
                    system = 'github'
                    url = 'https://github.com/GTNewHorizons/GT-New-Horizons-Modpack/issues'
                }

                licenses {
                    license {
                        name = 'Lesser GNU Public License, Version 2.1'
                        url = 'https://www.gnu.org/licenses/lgpl-2.1.html'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'AbrarSyed'
                        name = 'Abrar Syed'
                        roles = ['developer']
                    }

                    developer {
                        id = 'LexManos'
                        name = 'Lex Manos'
                        roles = ['developer']
                    }

                    developer {
                        id = 'anatawa12'
                        name = 'anatawa12'
                        roles = ['developer']
                    }
                }
            }
            repositories {
                maven {
                    url = 'http://jenkins.usrv.eu:8081/nexus/content/repositories/releases'
                    credentials {
                        username = System.getenv("MAVEN_USER") ?: "NONE"
                        password = System.getenv("MAVEN_PASSWORD") ?: "NONE"
                    }
                }
            }
        }
    }
}

// write out version so it's convenient for doc deployment
file('build').mkdirs()
file('build/version.txt').text = version;

tasks.register('setupCIWorkspace') {
    doFirst {
        println 'not necessary'
    }
}